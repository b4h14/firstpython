#Importando o pandas para o projeto
  import pandas as pd
  
#Importando base de dados
  csv = pd.read_csv('nomeArquivo.csv')
  json = pd.read_json('nomeArquivo.json')
  txt = pd.read_table('nomeArquivo.txt')
  xlsx = pd.read_excel('nomeArquivo.xlsx')
    
#exportando bases de dados
  #csv = nomedaDS.to_csv('nomedoarquivo.csv')
  #json = dataset.to_json()
  #html = dataset.to_html()
  #sql = dataset.to_sql(nomeTabela, create_engine)

#criando series e dataframes no pandas
  #series - lista de registros unicos, com indice e registro
    pd.Series(lista)    
  #dataframes - listas com diversos valores para cada indice
    pd.DataFrame(dicionario)
  #Criando dataframe a partir de outro dataframe
    dataset.to_frame()

#selecionando colunas
  pd.nomeDataframe['nomedaColuna']
  dataframe.coluna
  
#Funcoes basicas em pandas
  
  #Obter informações importantes no dataframe
    dataset.info()
  #Saber a quantidade de colunas/linhas
    dataset.shape()
  #Visualizar os datatypes
    dataset.dtypes()
  #Trazer os 5 primeiros registros
    dataset.head()
  #Trazer alguns valores estatísticos importantes
    dataset.describe()
  #Fazer uma busca de registros
    dataset.loc[nomeRegistro]
  #Fazer a mesma busca, com base no indice
    dataset.iloc[indiceRegistro]
  #Exportar um dataframe para um arquivo CSV
    dataset.to_csv('diretorio/nomeArquivo.csv')
  #Aplicar uma função para todas as linhas/registros
    dataset.apply()
  #Eliminar uma coluna retornando a coluna eliminada
    dataset.pop(indiceItemRetirado)
  #Eliminar uma linha ou coluna do dataset
    dataset.drop(itemOuColecaoRetirada, axis = 0 (linhas) | 1 (colunas))
  #Trazer uma quantidade de registros aleatorios
    dataset.sample(numeroRegistros)
    
#querys
  #estrutura básica - retorna uma consulta de coluna
    dataset.colunaDesejada
  #Query que retorna lista booleana
    dataset.querydesejada == ['parametro'] 
  #Query que retorna uma consulta de registro
    dataset[parametro]
      #pode ser usada a estrutura [() & ()] ao usar and, ou usar o | ao usar o or
  #Outra sintaxe 
    dataset.query('parametro1 == "registro1" and/or parametro2 == registro2')
  #dataset.columns.name = '', '', '' = Alterar nome das colunas do DF

#Lambda
  #Lambda é usada para criar uma função anônima, sem definições e por um curto periodo de tempo
    #Uma função lambda pode ter vários argumentos, mas só uma função
    #O Lambda é muito usado para inserir uma função dentro de outra função
  #Sintaxe
    lambda expressaoAnonima : expressaoRetorno

#tratamento de dados
  #inplace = confirma a substituição dos valores no DF
  
  #Consulta de uma coluna que retorna os valores vazios em formato booleano
    dataset.colunaConsultada.isna()
  #Preencher os dados vazios
    dataset.fillna(valorDesejado, inplace = True/False )
  #Remover dados vazios
    dataset.dropna()
  #Eliminar valores repetidos
    dataset.drop_duplicates()
  #Visualizar ou alterar o index de um df
    dataset.index = novoIndex
  #Retornar uma lista booleana informando se há um conjunto de itens pré-determinados
    dataset.isin(listaCriterios)
  #Retornar um dataframe informando se cada campo é nulo, ou não
    dataset.isnull()
    dataset.notnull()
  #Eliminar todos os registros nulos
    dataset.dropna(subset = criterioParaEliminarValoresNulos)
  #Preencher registros nulos
    dataset.fillna()
  #Agrupar registros conforme criterios
    dataset.groupby(agrupamentoDesejado)
  #Alterar as colunas ou o index de um dataframe
    dataset.rename(columns={chave1:registro1 ; chave2:registro2 ; ...}
      #é sempre necessário fazer o processo através de dicionários
